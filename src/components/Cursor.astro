<div class="cursor-container hide">
  <div class="cursor">
    <div class="cursor-contents"></div>
  </div>
  <div class="cursor-inner"></div>
</div>

<style>
  .cursor-container {
    --cursor-radius: 1rem;
    --cursor-scale: 1;
    --cursor-inner-scale: 0;
    --cursor-contents-scale: 0;
    --cursor-background-color: var(--primary-color-mid);
    --cursor-inner-background-color: var(--background-color);
    --cursor-border-radius: 100%;
    --cursor-up: 0rem;
    --cursor-down: 0rem;
    --cursor-left: 0rem;
    --cursor-right: 0rem;

    position: fixed;
    pointer-events: none;
    z-index: -1;
    top: calc(
      (var(--cursor-radius) * -1) + ((var(--cursor-down) - var(--cursor-up)) * var(--cursor-scale))
    );
    left: calc(
      (var(--cursor-radius) * -1) +
        ((var(--cursor-right) - var(--cursor-left)) * var(--cursor-scale))
    );
    transform: translate(calc(var(--cursor-size) * var(--cursor-scale) * -1));
    transition: transform 50ms, top 430ms cubic-bezier(1, 0.1, 0.1, 1),
      left 430ms cubic-bezier(1, 0.1, 0.1, 1);
  }

  .cursor,
  .cursor-inner {
    position: fixed;
    border-radius: var(--cursor-border-radius);
    width: calc(var(--cursor-radius) * 2);
    height: calc(var(--cursor-radius) * 2);
  }

  .cursor {
    overflow: hidden;
    transform: scale(var(--cursor-scale));
    background-color: var(--cursor-background-color);
    transition: transform 430ms cubic-bezier(1, 0.1, 0.1, 1), background-color 200ms ease-in-out,
      border-radius 430ms cubic-bezier(1, 0.1, 0.1, 1);
  }

  .cursor-inner {
    transform: scale(var(--cursor-inner-scale));
    background-color: var(--cursor-inner-background-color);
    transition: transform 780ms cubic-bezier(1, 0.1, 0.1, 1) 220ms,
      background-color 200ms ease-in-out, border-radius 430ms cubic-bezier(1, 0.1, 0.1, 1);
  }

  .cursor-contents {
    font-size: 0.8em;
    font-weight: bold;
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(var(--cursor-contents-scale));
    transition: transform 720ms ease;
  }

  .cursor-container.small {
    --cursor-scale: 0.5;
  }
  .cursor-container.large {
    --cursor-scale: 2.5;
  }
  .cursor-container.x-large {
    --cursor-scale: 3.5;
  }
  .cursor-container.xx-large {
    --cursor-scale: 5;
  }

  .cursor-container.hide {
    --cursor-scale: 0;
    --cursor-inner-scale: 0;
    --cursor-contents-scale: 0;
  }

  .cursor-container.square {
    --cursor-border-radius: 10%;
  }

  .cursor-container.has-contents {
    --cursor-contents-scale: 1;
  }

  .cursor-container.contents-small-chars .cursor-contents {
    font-weight: normal;
    font-size: 2.2em;
    top: 52%;
  }

  .cursor-container.up {
    --cursor-up: 1.2em;
  }
  .cursor-container.down {
    --cursor-down: 1.2em;
  }
  .cursor-container.left {
    --cursor-left: 1.2em;
  }
  .cursor-container.right {
    --cursor-right: 1.2em;
  }

  .cursor-container.in-gravity-well {
    --cursor-scale: 6;
    /* Slower movement due to gravity */
    transition: transform 150ms ease-out;
  }

  .cursor-container.in-gravity-well .cursor {
    /* Slower growth in size due to show off effect */
    transition: transform 430ms ease;
  }

  .cursor-container.in-gravity-well.small {
    --cursor-scale: 7;
  }

  .cursor-container.transition {
    --cursor-scale: 1.33;
    --cursor-inner-scale: 1.35;
    --cursor-contents-scale: 0;
    --cursor-inner-background-color: var(--background-color);
  }

  @media (ponter: coarse) {
    .cursor-container {
      display: none;
    }
  }
</style>

<script>
  import { getDistance } from "utils/math/getDistance";
  import { lerpVector } from "utils/math/lerp";
  import { mapToRange } from "utils/math/maptoRange";

  if (matchMedia("(pointer:fine)").matches) {
    const cursor = document.querySelector<HTMLDivElement>("div.cursor-container");
    const cursorContents = document.querySelector<HTMLDivElement>(".cursor-contents");
    const interactiveElements = document.querySelectorAll<HTMLAnchorElement>("a, button");
    const gravityWell = document.querySelector<HTMLDivElement>("[data-gravity-well=true]");
    const cursorColorElements = document.querySelectorAll<HTMLElement>("[data-cursor-color]");
    const cursorSizeElements = document.querySelectorAll<HTMLElement>("[data-cursor-size]");
    const cursorMoveElements = document.querySelectorAll<HTMLElement>("[data-cursor-move]");
    const cursorContentsElements = document.querySelectorAll<HTMLElement>("[data-cursor-contents]");
    const cursorRegrowElements = document.querySelectorAll<HTMLElement>(
      "[data-cursor-regrow=true]"
    );
    const navLinks = document.querySelectorAll<HTMLAnchorElement>(
      "[data-triggers-nav-transition=true]"
    );

    // TODO: fix on safari — maybe try animating top/left?
    const handleCursorMove = ([mouseX, mouseY]: [number, number]) => {
      cursor.style.transform = `translate3d(${mouseX}px, ${mouseY}px, 0px)`;
    };

    const handleCursorMoveWithGravityWell = ([mouseX, mouseY]: [number, number]) => {
      const largestViewPortSize = Math.max(window.innerWidth, window.innerHeight);
      const strongPullThreshold = largestViewPortSize / 4;
      const weakPullThreshold = strongPullThreshold + 50;

      const wellCenterX = gravityWell.offsetLeft + gravityWell.offsetWidth / 2;
      const wellCenterY = gravityWell.offsetTop + gravityWell.offsetHeight / 2;

      const distanceToWell = getDistance([wellCenterX, wellCenterY], [mouseX, mouseY]);

      if (distanceToWell > weakPullThreshold || !gravityWell.dataset.isActive) {
        cursor.classList.remove("in-gravity-well");
        handleCursorMove([mouseX, mouseY]);
        return;
      }

      if (distanceToWell > strongPullThreshold) {
        cursor.classList.remove("in-gravity-well");
        const [x, y] = lerpVector(
          [mouseX, mouseY],
          [wellCenterX, wellCenterY],
          mapToRange(10 + weakPullThreshold - distanceToWell, 0, largestViewPortSize, 0, 2)
        );
        cursor.style.transform = `translate(${x}px, ${y}px)`;
      } else {
        cursor.classList.add("in-gravity-well");
        const [x, y] = lerpVector(
          [wellCenterX, wellCenterY],
          [mouseX, mouseY],
          mapToRange(distanceToWell, 0, largestViewPortSize, 0, 0.33)
        );
        cursor.style.transform = `translate(${x}px, ${y}px)`;
      }
    };

    document.addEventListener("mousemove", e => {
      cursor.classList.remove("hide");
      !!gravityWell
        ? handleCursorMoveWithGravityWell([e.clientX, e.clientY])
        : handleCursorMove([e.clientX, e.clientY]);
    });

    document.addEventListener("mousedown", () => cursor.classList.add("small"));
    document.addEventListener("mouseup", () => cursor.classList.remove("small"));

    interactiveElements.forEach(link => {
      link.addEventListener("mouseenter", () => cursor.classList.add("large"));
      link.addEventListener("mouseleave", () => cursor.classList.remove("large"));
    });

    cursorMoveElements.forEach(el => {
      el.addEventListener("mouseenter", () => cursor.classList.add(el.dataset.cursorMove));
      el.addEventListener("mouseleave", () => cursor.classList.remove(el.dataset.cursorMove));
    });

    cursorSizeElements.forEach(el => {
      el.addEventListener("mouseenter", () => cursor.classList.add(el.dataset.cursorSize));
      el.addEventListener("mouseleave", () => cursor.classList.remove(el.dataset.cursorSize));
    });

    cursorContentsElements.forEach(el => {
      el.addEventListener("mouseenter", () => {
        cursor.classList.add("has-contents");
        /* annoyingly some characters, like +/-, aren't quite the right size in fleuron */
        if (["+", "-", "–", "—"].includes(el.dataset.cursorContents))
          cursor.classList.add("contents-small-chars");
        cursorContents.innerText = el.dataset.cursorContents;
      });
      el.addEventListener("mouseleave", () => {
        cursor.classList.remove("has-contents", "contents-small-chars");
        cursorContents.innerText = "";
      });
      // some of these elements may change their data-cursor-contents attribute on click
      el.addEventListener("click", () => (cursorContents.innerText = el.dataset.cursorContents));
    });

    cursorColorElements.forEach(el => {
      el.addEventListener("mouseenter", () => {
        cursor.style.setProperty("--cursor-background-color", el.dataset.cursorColor);
      });
      el.addEventListener("mouseleave", () =>
        cursor.style.setProperty("--cursor-background-color", null)
      );
    });

    cursorRegrowElements.forEach(el => {
      el.addEventListener("click", () => {
        if (!cursor.classList.contains(el.dataset.cursorSize)) return;
        cursor.classList.remove(el.dataset.cursorSize, "large");
        const cursorReset = setTimeout(() => cursor.classList.add(el.dataset.cursorSize), 1000);
        el.addEventListener("click", () => clearTimeout(cursorReset), { once: true });
        el.addEventListener(
          "mouseleave",
          () => {
            clearTimeout(cursorReset);
            cursor.classList.remove(el.dataset.cursorSize, "large");
          },
          { once: true }
        );
      });
    });

    // TODO: break out into transition-specific script?
    navLinks.forEach(link => {
      if (!link.href) return;
      link.addEventListener("click", e => {
        const transitionElements = document.querySelectorAll("[data-transition-element=true]");
        let interval = 150;
        transitionElements.forEach((el, i) => {
          setTimeout(() => el.classList.remove("loaded"), interval * i);
          interval -= 5;
        });

        setTimeout(() => cursor.classList.add("transition"), 200);

        const transitionDuration = Math.min(1000 + transitionElements.length * 100, 1700);
        setTimeout(() => window.location.assign(link.href), transitionDuration);
        e.preventDefault();
      });
    });

    // We need to handle cases where the browser saves the post-exit-transition state in the
    // bfcache, and quickly have those elements appear again if so
    window.addEventListener("pageshow", e => {
      if (!e.persisted) return;
      const transitionElements = document.querySelectorAll("[data-transition-element=true]");
      transitionElements.forEach(el => el.classList.add("loaded"));
      cursor.classList.remove("transition");
    });

    /* TODO
     * Investigate cursor and orbit ring entry bug. after navigation, they dont have the correct stating position:
     *
     * 1) Only in Chomrium browsers
     * 2) Only when you are navigating naturally between pages (not back/forward/refresh)
     * 2) Only when you're moving the mouse as you navigate between pages
     * 3) Only in production 
     * 
     * bfcache is disabled in dev. I wonder if it's related, despite it not being used for those navigations?
     */
  }
</script>
