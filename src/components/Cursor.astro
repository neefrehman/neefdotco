<div class="cursor-presence-container" />

<custom-cursor id="user-cursor" />

<style is:global>
  .cursor-presence-container {
    custom-cursor {
      position: absolute;
      z-index: -5;
    }
  }

  custom-cursor {
    --cursor-radius: 1rem;
    --cursor-scale: 1;
    --cursor-transition-overlay-scale: 0;
    --cursor-contents-scale: 0;
    --cursor-background-color: var(--primary-color-mid);
    --cursor-transition-overlay-background-color: var(--background-color);
    --cursor-border-radius: 100%;
    --cursor-up: 0rem;
    --cursor-down: 0rem;
    --cursor-left: 0rem;
    --cursor-right: 0rem;

    position: fixed;
    pointer-events: none;
    z-index: -1;
    top: calc((var(--cursor-radius) * -1) + ((var(--cursor-down) - var(--cursor-up)) * var(--cursor-scale)));
    left: calc((var(--cursor-radius) * -1) + ((var(--cursor-right) - var(--cursor-left)) * var(--cursor-scale)));
    transition:
      translate 85ms,
      top 430ms cubic-bezier(1, 0.1, 0.1, 1),
      left 430ms cubic-bezier(1, 0.1, 0.1, 1);

    @media (ponter: coarse) {
      display: none;
    }

    .cursor-outer,
    .cursor-transition-overlay {
      position: fixed;
      border-radius: var(--cursor-border-radius);
      width: calc(var(--cursor-radius) * 2);
      height: calc(var(--cursor-radius) * 2);
    }

    .cursor-outer {
      overflow: hidden;
      background-color: var(--cursor-background-color);
      scale: var(--cursor-scale);
      transition:
        scale 430ms cubic-bezier(1, 0.1, 0.1, 1),
        background-color 200ms ease-in-out,
        border-radius 720ms ease;
    }

    .cursor-transition-overlay {
      background-color: var(--cursor-transition-overlay-background-color);
      scale: var(--cursor-transition-overlay-scale);
      transition:
        scale 780ms cubic-bezier(1, 0.1, 0.1, 1) 220ms,
        background-color 200ms ease-in-out,
        border-radius 430ms cubic-bezier(1, 0.1, 0.1, 1);
    }

    .cursor-contents {
      font-size: 0.8em;
      font-weight: bold;
      display: block;
      position: absolute;
      top: 50%;
      left: 50%;
      translate: -50% -50%;
      scale: var(--cursor-contents-scale);
      transition:
        translate 720ms ease,
        scale 720ms ease;
    }

    &.small {
      --cursor-scale: 0.5;
    }
    &.large {
      --cursor-scale: 2.5;
    }
    &.x-large {
      --cursor-scale: 3.5;
    }
    &.xx-large {
      --cursor-scale: 5;
    }

    &.hide {
      --cursor-scale: 0;
      --cursor-transition-overlay-scale: 0;
      --cursor-contents-scale: 0;
    }

    &.square {
      --cursor-border-radius: 10%;
    }

    &.has-contents {
      --cursor-contents-scale: 1;
    }

    &.contents-small-chars .cursor-contents {
      font-weight: normal;
      font-size: 2.2em;
      top: 52%;
    }

    &.up {
      --cursor-up: 1.2em;
    }
    &.down {
      --cursor-down: 1.2em;
    }
    &.left {
      --cursor-left: 1.2em;
    }
    &.right {
      --cursor-right: 1.2em;
    }

    &.in-gravity-well {
      --cursor-scale: 6;

      transition: translate 200ms ease-out; /* Slower movement due to gravity */

      .cursor-outer {
        transition: scale 430ms ease; /* Slower growth in size to show off effect */
      }

      &.small {
        --cursor-scale: 7;
      }
    }

    &.exiting {
      --cursor-scale: 1.33;
      --cursor-transition-overlay-scale: 1.35;
      --cursor-contents-scale: 0;
      --cursor-transition-overlay-background-color: var(--background-color);
    }
  }
</style>

<script>
  import { throttle } from "utils/throttle";
  import { getDistance } from "utils/math/getDistance";
  import { lerpVector } from "utils/math/lerp";
  import { mapToRange } from "utils/math/maptoRange";
  import { parseCursorOutput, serializeCursorInput } from "utils/cursors";
  import type { Vector } from "utils/math/types";

  class Cursor extends HTMLElement {
    position: Vector<2> = [0, 0];
    cursorContentsElement: HTMLDivElement;

    constructor() {
      super();
    }

    connectedCallback() {
      const visibleCursor = document.createElement("div");
      const cursorContents = document.createElement("div");
      const cursorTransitionOverlay = document.createElement("div");

      this.classList.add("hide");
      this.appendChild(visibleCursor).classList.add("cursor-outer");
      visibleCursor.appendChild(cursorContents).classList.add("cursor-contents");
      this.appendChild(cursorTransitionOverlay).classList.add("cursor-transition-overlay");

      this.cursorContentsElement = cursorContents;
    }

    move = ([x, y]: Vector<2>) => {
      this.position = [x, y];
      this.style.translate = `${x}px ${y}px`;
    };

    set textContent(text: string) {
      if (text === "") {
        this.classList.remove("has-contents", "contents-small-chars");
        this.cursorContentsElement.textContent = "";
        return;
      }
      // annoyingly some characters, like +/-, aren't quite the right size in Fleuron
      if (["+", "-", "–", "—"].includes(text)) {
        this.classList.add("contents-small-chars");
      }
      this.classList.add("has-contents");
      this.cursorContentsElement.textContent = text;
    };

    get textContent() {
      return this.cursorContentsElement.textContent;
    }
  }

  customElements.define("custom-cursor", Cursor);
  
  if (matchMedia("(pointer:fine)").matches) {
    const cursor = document.querySelector<Cursor>("custom-cursor");
    const gravityWell = document.querySelector<HTMLDivElement>("[data-gravity-well=true]");

    const handleCursorMoveWithGravityWell = ([mouseX, mouseY]: [number, number]) => {
      const largestViewPortSize = Math.max(window.innerWidth, window.innerHeight);
      const strongPullThreshold = largestViewPortSize / 4;
      const weakPullThreshold = strongPullThreshold + 50;

      const wellCenterX = gravityWell.offsetLeft + gravityWell.offsetWidth / 2;
      const wellCenterY = gravityWell.offsetTop + gravityWell.offsetHeight / 2;

      const distanceToWell = getDistance([wellCenterX, wellCenterY], [mouseX, mouseY]);

      if (distanceToWell > weakPullThreshold || !gravityWell.dataset.isActive) {
        cursor.classList.remove("in-gravity-well");
        cursor.move([mouseX, mouseY]);
        if (gravityWell.dataset.cursorContentsInWell) {
          cursor.textContent = "";
        }
        return;
      }

      if (distanceToWell > strongPullThreshold && !cursor.classList.contains("in-gravity-well")) {
        const [x, y] = lerpVector(
          [mouseX, mouseY],
          [wellCenterX, wellCenterY],
          mapToRange(10 + weakPullThreshold - distanceToWell, 0, largestViewPortSize, 0, 2)
        );
        cursor.move([x, y]);
        return;
      }

      cursor.classList.add("in-gravity-well");
      const [x, y] = lerpVector(
        [wellCenterX, wellCenterY],
        [mouseX, mouseY],
        mapToRange(distanceToWell, 0, largestViewPortSize, 0, 0.33)
      );
      cursor.move([x, y]);
      if (gravityWell.dataset.cursorContentsInWell) {
        cursor.textContent = gravityWell.dataset.cursorContentsInWell;
      }
    };

    const handleMouseMove = gravityWell ? handleCursorMoveWithGravityWell : cursor.move;

    document.addEventListener("mousemove", throttle((e: MouseEvent) => {
      cursor.classList.remove("hide");
      handleMouseMove([e.clientX, e.clientY]);
    }, 35)); // ~33fps

    document.addEventListener("mousedown", () => cursor.classList.add("small"));
    document.addEventListener("mouseup", () => cursor.classList.remove("small"));

    const interactiveElements = document.querySelectorAll<HTMLAnchorElement>("a, button");
    const cursorColorElements = document.querySelectorAll<HTMLElement>("[data-cursor-color]");
    const cursorSizeElements = document.querySelectorAll<HTMLElement>("[data-cursor-size]");
    const cursorMoveElements = document.querySelectorAll<HTMLElement>("[data-cursor-move]");
    const cursorShapeElements = document.querySelectorAll<HTMLElement>("[data-cursor-shape]");
    const cursorContentsElements = document.querySelectorAll<HTMLElement>("[data-cursor-contents]");
    const cursorRegrowElements = document.querySelectorAll<HTMLElement>("[data-cursor-regrow=true]");

    interactiveElements.forEach(link => {
      link.addEventListener("mouseenter", () => cursor.classList.add("large"));
      link.addEventListener("mouseleave", () => cursor.classList.remove("large"));
    });

    cursorMoveElements.forEach(el => {
      el.addEventListener("mouseenter", () => cursor.classList.add(el.dataset.cursorMove));
      el.addEventListener("mouseleave", () => cursor.classList.remove(el.dataset.cursorMove));
    });

    cursorShapeElements.forEach(el => {
      el.addEventListener("mouseenter", () => cursor.classList.add(el.dataset.cursorShape));
      el.addEventListener("mouseleave", () => cursor.classList.remove(el.dataset.cursorShape));
    });

    cursorSizeElements.forEach(el => {
      el.addEventListener("mouseenter", () => cursor.classList.add(el.dataset.cursorSize));
      el.addEventListener("mouseleave", () => cursor.classList.remove(el.dataset.cursorSize));
    });

    cursorContentsElements.forEach(el => {
      el.addEventListener("mouseenter", () => cursor.textContent = el.dataset.cursorContents);
      el.addEventListener("mouseleave", () => cursor.textContent = "");
      // some of these elements may change their data-cursor-contents attribute on click
      el.addEventListener("click", () => setTimeout(() => cursor.textContent = el.dataset.cursorContents, 10));
    });

    cursorColorElements.forEach(el => {
      el.addEventListener("mouseenter", () => {
        cursor.style.setProperty("--cursor-background-color", el.dataset.cursorColor);
      });
      el.addEventListener("mouseleave", () => cursor.style.setProperty("--cursor-background-color", null));
    });

    cursorRegrowElements.forEach(el => {
      el.addEventListener("click", () => {
        if (!cursor.classList.contains(el.dataset.cursorSize)) {
          return;
        }
        cursor.classList.remove(el.dataset.cursorSize, "large");
        const cursorReset = setTimeout(() => cursor.classList.add(el.dataset.cursorSize), 1000);
        el.addEventListener("click", () => clearTimeout(cursorReset), { once: true });
        el.addEventListener("mouseleave", () => {
          clearTimeout(cursorReset);
          cursor.classList.remove(el.dataset.cursorSize, "large")
        }, { once: true });
      });
    });

    const connectToCursorPartySocket = () => {
      const page = window.location.pathname.replace("/", "") || "index";
      const socket = new WebSocket(`${import.meta.env.PUBLIC_SOCKET_URL}/parties/main/${page}`);

      const presenceContainer = document.querySelector(".cursor-presence-container");

      const getCursor = (id: string) => document.getElementById(id) as Cursor | undefined;

      const createCursorPresence = (id: string) => {
        const newCursor = document.createElement("custom-cursor") as Cursor;
        newCursor.id = id;
        presenceContainer.append(newCursor);
        return newCursor;
      };

      const removeCursor = (id: string) => {
        const cursorToDelete = getCursor(id);
        cursorToDelete.classList.add("hide");
        setTimeout(() => cursorToDelete.remove(), 500);
      };

      const NEIGHBOR_PULL_THRESHOLD = 65;
      const attractCursor = (id: string) => {
        const otherCursor = getCursor(id);
        if (!otherCursor) {
          return;
        }
        const distance = getDistance(otherCursor.position, cursor.position);
        if (distance > NEIGHBOR_PULL_THRESHOLD || distance < 15) {
          return;
        }
        const [x, y] = lerpVector(
          cursor.position,
          otherCursor.position,
          mapToRange(distance, 0, NEIGHBOR_PULL_THRESHOLD, 0, 0.15)
        );
        cursor.move([x, y]);
      };

      socket.addEventListener("message", event => {
        const data = parseCursorOutput(event.data);
        switch (data.type) {
          case "JOIN":
            createCursorPresence(data.id);
            break;
          case "LEAVE":
            removeCursor(data.id);
            break;
          case "UPDATE":
            // TODO: optimise mutations / reads, potentially move to fractional updates?
            // TODO: rudimentary chat with cursorContents?
            // TODO: improve attraction when there's two actual cursors!
            // TODO: attract between multiple cursors, or only send closest neighbor
            // TODO: dynamically import and run code only when cursor:pointer is true
            const { id, message: { className, color, coords, textContent } } = data;
            const cursorToUpdate = getCursor(id) ?? createCursorPresence(id);
            cursorToUpdate.textContent = textContent;
            cursorToUpdate.move(coords);
            cursorToUpdate.style.setProperty("--cursor-background-color", color);
            setTimeout(() => (cursorToUpdate.className = className), 8); // HACK: this small delay prevents an external cursor form appearing immediately after a refresh, if it is moving
            break;
          case "NEIGHBORS":
            data.message.neighbors.forEach(attractCursor);
            break;
        }
      });

      let connectRetryInterval: NodeJS.Timeout;
      socket.addEventListener("open", () => {
        clearInterval(connectRetryInterval);
        const innerCursorWithComputedBackgroundColor = cursor.querySelector<HTMLDivElement>(".cursor-outer");

        const cursorMutationObserver = new MutationObserver((() => {
          socket.send(
            serializeCursorInput({
              className: cursor.className,
              textContent: cursor.textContent,
              // We must use `getComputedStyle`, as the `style.backgroundColor` value isn't known to others, if its a custom property itself
              color: getComputedStyle(innerCursorWithComputedBackgroundColor).getPropertyValue("--cursor-background-color"), 
              coords: cursor.position,
              scrollY: window.scrollY,
            })
          );
        }));

        cursorMutationObserver.observe(cursor, {
          childList: true,
          subtree: true,
          attributeFilter: ["position", "class", "style"],
        });

        // ensures we trigger the mutation observer when the user scrolls, instead of waiting for the mouse to move after scrolling
        const handleScroll = throttle(() => (cursor.className = cursor.className), 30);
        document.addEventListener("scroll", handleScroll);

        let keydownTimeout: NodeJS.Timeout;
        window.addEventListener("keydown", (e) => {
          const clearCursor = () => {
            cursor.textContent = "";
            cursor.classList.remove("large");
          };
          clearTimeout(keydownTimeout);
          if (e.key === "Backspace") {
            clearCursor()
            return;
          }
          if (document.activeElement.tagName !== "BODY" || e.key.length !== 1) {
            return;
          }
          if (cursor.textContent === e.key) {
            cursor.classList.remove("has-contents");
            setTimeout(() => cursor.classList.add("has-contents"), 80);
            return;
          }
          cursor.textContent = e.key;
          cursor.classList.add("large");
          keydownTimeout = setTimeout(clearCursor, 2000);
        })

        const closeWithReconnectAttempts = () => {
          document.removeEventListener("scroll", handleScroll);
          cursorMutationObserver.disconnect();
          presenceContainer.querySelectorAll("custom-cursor").forEach((el) => removeCursor(el.id));
          connectRetryInterval = setInterval(connectToCursorPartySocket, 1000);
          setTimeout(() => clearInterval(connectRetryInterval), 5000);
        };

        socket.addEventListener("close", closeWithReconnectAttempts, { once: true });
        socket.addEventListener("error", closeWithReconnectAttempts, { once: true });
      });
    };
    connectToCursorPartySocket();
  }
</script>
