---
interface Props {
  /** An array of 60 words */
  words: string[];
  cursorContentsInWell?: string;
  "aria-hidden"?: "true" | "false";
}

const { words, "aria-hidden": ariahidden, cursorContentsInWell } = Astro.props;

/*
  Circumference = 2 * PI * r, so doubling the radius also doubles the circumference, i.e. each
  concentric ring should increase in word count by the number of words of the smallest ring.
*/
const OUTER_CIRCLE_WORD_COUNT = 30;
const MIDDLE_CIRCLE_WORD_COUNT = 20;
const INNER_CIRCLE_WORD_COUNT = 10;

const OUTER_CIRCLE = words.splice(0, OUTER_CIRCLE_WORD_COUNT);
const MIDDLE_CIRCLE = words.splice(0, MIDDLE_CIRCLE_WORD_COUNT);
const INNER_CIRCLE = words.splice(0, INNER_CIRCLE_WORD_COUNT);
---

<div
  class="system"
  data-gravity-well="true"
  data-cursor-contents-in-well={cursorContentsInWell}
  aria-hidden={ariahidden ?? "false"}
>
  <div class="word-ring" style="--ring-index: 3" data-transition-element="true">
    <ul style={`--word-count: ${OUTER_CIRCLE.length}`}>
      {OUTER_CIRCLE.map((skill, i) => <li style={`--index: ${i}`}>{skill}</li>)}
    </ul>
  </div>

  <div class="word-ring" style="--ring-index: 2" data-transition-element="true">
    <ul style={`--word-count: ${MIDDLE_CIRCLE.length}`}>
      {MIDDLE_CIRCLE.map((skill, i) => <li style={`--index: ${i}`}>{skill}</li>)}
    </ul>
  </div>

  <div class="word-ring" style="--ring-index: 1" data-transition-element="true">
    <ul style={`--word-count: ${INNER_CIRCLE.length}`}>
      {INNER_CIRCLE.map((skill, i) => <li style={`--index: ${i}`}>{skill}</li>)}
    </ul>
  </div>
</div>

<style>
  div.system {
    position: fixed;
    z-index: 0;
    bottom: 13vh;
    right: 8vw;
    transform: rotate(-10deg);
  }

  /* Lower opacity and move further from the top on shorter devices, to avoid clashes with page content */
  @media (max-height: 700px) and (max-width: 800px) {
    div.system {
      bottom: 8vh;
      right: 3vw;
      opacity: 0.4;
    }
  }

  div.system .word-ring {
    opacity: 1;
    top: 0px;
    position: relative;
    transform-style: preserve-3d;
    transition:
      transform 1000ms ease,
      opacity 400ms ease,
      top 1000ms cubic-bezier(0, 0.9, 0.1, 1),
      rotate calc(700ms * var(--ring-index)) cubic-bezier(0, 0, 0.2, 1);
  }

  div.system .word-ring:not(.loaded) {
    top: 20vh;
    opacity: 0;
    transition:
      transform 1000ms ease,
      opacity 400ms ease,
      top 400ms cubic-bezier(0.9, 0, 0.6, 1);
  }

  div.system ul {
    position: relative;
    transform-style: preserve-3d;
    animation: three-dimensions-circle 540s linear infinite;
  }

  div.system ul > li {
    position: absolute;
    top: 50%;
    left: 50%;
    padding: 0 4px;
    line-height: 1.3;
    width: max-content;
    background-color: var(--link-background-color);
    color: var(--text-color);
    --r: clamp(var(--ring-index) * 250px, var(--ring-index) * 25vw, var(--ring-index) * 600px);
    --a: calc(var(--index) * (360 / var(--word-count)) * 1deg);
    transform: translateX(-50%) rotateZ(var(--a)) translateY(var(--r)) rotateX(90deg);
  }

  @media (pointer: fine) {
    div.system:has(:hover) {
      --rotateZ: 5deg;
    }

    div.system:has(:active) {
      --rotateZ: 10deg;
    }

    div.system .word-ring:nth-child(odd) {
      transform: rotateZ(var(--rotateZ, 0deg));
    }

    div.system .word-ring:nth-child(even) {
      transform: rotateZ(calc(var(--rotateZ, 0deg) * -1));
    }

    div.system ul > li:hover {
      background-color: var(--opposite-mode-background);
      color: var(--background-color);
    }
  }

  @keyframes three-dimensions-circle {
    0% {
      transform: rotateX(-100deg) rotate(0);
    }
    100% {
      transform: rotateX(-100deg) rotate(-360deg);
    }
  }
</style>

<script>
  import { throttle } from "utils/throttle";

  const rings = document.querySelectorAll<HTMLElement>(".system .word-ring");
  rings.forEach((ring, i) => {
    setTimeout(() => ring.classList.add("loaded"), 500 + i * 300);
  });

  // only pull cursor once rings have completed their transitions
  const system = document.querySelector<HTMLElement>(".system");
  setTimeout(() => (system.dataset.isActive = "true"), 400 + rings.length * 300);

  if ("ontouchstart" in document.documentElement && "DeviceOrientationEvent" in window) {
    interface iOSDeviceOrientationEvent extends DeviceOrientationEvent {
      requestPermission?: () => Promise<"granted" | "forbidden">;
    }
    const DOE = DeviceOrientationEvent as unknown as iOSDeviceOrientationEvent;

    const orbiters = document.querySelectorAll<HTMLElement>(".system li");
    const tiltOrbit = throttle((e: DeviceOrientationEvent) => {
      const tilt = window.innerHeight > window.innerWidth ? e.gamma : e.beta;
      rings.forEach(ring => (ring.style.rotate = `${tilt}deg`));
    }, 41); // ~24fps

    let hasOrientationListener = false;
    orbiters.forEach(object => {
      object.addEventListener("click", () => {
        if (hasOrientationListener) {
          window.removeEventListener("deviceorientation", tiltOrbit);
          rings.forEach(ring => (ring.style.rotate = null));
          hasOrientationListener = false;
          return;
        }

        // For iOS devices that need permission, we request it and only add the event listener
        // when granted. This is a noop if we already have permissions.
        if ("requestPermission" in DOE) {
          DOE.requestPermission()
            .then(state => {
              if (state === "granted") {
                window.addEventListener("deviceorientation", tiltOrbit);
                hasOrientationListener = true;
              }
            })
            .catch();
        }
        // for other devices, and for already granted iOS devices, we add the listener
        window.addEventListener("deviceorientation", tiltOrbit);
        hasOrientationListener = true;
      });
    });
  }
</script>
