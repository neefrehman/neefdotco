---
import fs from "fs";
import { Picture } from "astro:assets";
import Layout from "../layouts/Layout.astro";

const quantisedColorMap = JSON.parse(
  fs.readFileSync("./src/data/quantized-photo-colors.json", "utf-8")
);

const photos = await Promise.all(
  fs
    .readdirSync("./src/photos/large")
    .filter(name => name !== ".DS_Store")
    .map(name => name.split(".jpg")[0]) // required to make vite import resolver happy
    .map(async name => ({
      src: import(`../photos/large/${name}.jpg`),
      keyColor: quantisedColorMap[`${name}.jpg`] ?? "var(--opposite-mode-background)",
    }))
);

const spacerElementList = [...Array(Math.ceil(photos.length * 0.4))];
---

<Layout
  title="Photos â€” Neef Rehman"
  description="Photography by Neef Rehman, a Creative Technologist and full-stack engineer"
  metaImageUrl="https://neef.co/images/meta-image-photos.png"
>
  <div class="photo-container">
    {
      photos.map(photo => (
        <Picture
          src={photo.src}
          pictureAttributes={{
            style: `--photo-key-color: ${photo.keyColor}`, 
            // @ts-expect-error -- astro doesn't accept data attributes in the `pictureAttributes` prop types, but it works at runtime
            "data-transition-element": "true"
          }}
          alt=""
          widths={[640, 768, 1024, 1600, 1920]}
          formats={["avif", "webp"]}
        />
      ))
    }
    {spacerElementList.map(() => <div class="spacer pointer-events-none" />)}
  </div>
</Layout>

<!-- This needs to be global, as otherwise Astro's scoping logic would not work, -->
<!-- as the required data attributes are not added to `Picture` elements. -->
<!-- The CSS nesting will scope the variables well enough anyway. -->
<style is:global>
  .photo-container {
    margin: 10px;
    margin-top: -100px;
    padding-bottom: 80px;
    display: flex;
    flex-wrap: wrap;
    align-items: flex-end;
    justify-content: space-around;
    row-gap: clamp(100px, 20vw, 200px);
    column-gap: clamp(50px, 12vw, 120px);

    :is(picture, .spacer) {
      --width: clamp(280px + var(--y), 280px + var(--y) + 2.5vw, 370px + var(--y));
      --height: clamp(227px + var(--x), 227px + var(--x) + 2.5vw, 300px + var(--x));
      --scale: 1;
      width: calc(var(--width) * var(--scale));
      height: calc(var(--height) * var(--scale));
    }

    picture {
      background-color: var(--photo-key-color);
      filter: contrast(90%);
      overflow-y: hidden;
      position: relative;
      cursor: crosshair;
      border: 0;
      --translate-x: clamp(var(--x) * 0.5, var(--x) + 7vw, var(--x) * 0.8);
      --translate-y: clamp(var(--y) * 0.5, var(--y) + 7vw, var(--y) * 1.3);
      transform: translate3d(var(--translate-x), var(--translate-y), 0);
      transition: transform 2100ms cubic-bezier(0, 0.9, 0.1, 1);

      &:not(.initial-loaded) {
        /* Prevents the browser from loading images that are at the top of the page, before we shuffle them */
        display: none;
      }
    
      &:first-child {
        margin-left: clamp(40px, 7vw, 100px);
      }
    
      &:hover {
        z-index: 2;
        filter: contrast(88%) brightness(105%);
      }
    
      &.zoom {
        --scale: 2.5;
      }
    
      &:not(.loaded) {
        transform: translate3d(var(--translate-x), calc(var(--translate-y) + 33% + var(--y)), 0);
        transition: transform 1300ms cubic-bezier(0, 0.9, 0.1, 1);

        &::after {
          transform: scale3d(1, 1, 1);
        }
      }
    
      &::after {
        content: "";
        display: block;
        background-color: var(--photo-key-color);
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        transform: scale3d(1, 0, 1);
        transform-origin: bottom;
        transition: transform 300ms cubic-bezier(0.9, 0, 0.6, 1);
      }
    }
  
    @media (max-width: 575px) {
      .spacer {
        height: 0;
      }
  
      picture {
        &.zoom {
          --scale: 1.5;
        }
    
        &:not(.loaded) {
          transform: translate3d(
            var(--translate-x),
            calc((var(--translate-y) + 33% + var(--y)) * 0.5),
            0
          );
        }
      }
    }
  }
</style>

<script>
  import { shuffle } from "utils/math/shuffle";

  const photoContainer = document.querySelector(".photo-container");
  const photos = photoContainer.querySelectorAll<HTMLElement>(":scope > *");

  const getRandomOffset = () => 10 * Math.floor(Math.random() * 9) - 40;

  const randomizedPhotos = shuffle(Array.from(photos)).map(photo => {
    photo.style.setProperty("--x", `${getRandomOffset()}px`);
    photo.style.setProperty("--y", `${getRandomOffset()}px`);
    photo.classList.add("initial-loaded");
    return photo.outerHTML;
  }).join("");

  photoContainer.innerHTML = randomizedPhotos;
  const photosAfterShuffle = photoContainer.querySelectorAll("picture");

  let loadedPhotoCount = 0;
  photosAfterShuffle.forEach((photo, i) => {
    const imageElement = photo.querySelector<HTMLImageElement>("img");
    if (i < 3) {
      imageElement.fetchPriority = "high";
    }

    imageElement.addEventListener("load", () => {
      // loadedPhotoCount delays the transition so they don't all load at the same time (for cached images)
      loadedPhotoCount++;
      setTimeout(() => photo.classList.add("loaded"), 200 + loadedPhotoCount * 30);
    });

    photo.addEventListener("click", () => {
      photo.classList.toggle("zoom");
      const siblings = [...photosAfterShuffle].filter(sibling => sibling !== photo);
      siblings.forEach(sibling => sibling.classList.remove("zoom"));
    });
  });
</script>
