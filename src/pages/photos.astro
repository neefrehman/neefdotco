---
import fs from "fs";
import { getPicture } from "@astrojs/image";
import Layout from "../layouts/Layout.astro";

const quantisedColorMap = JSON.parse(
  fs.readFileSync("./src/data/quantized-photo-colors.json", "utf-8")
);

const photos = await Promise.all(
  fs
    .readdirSync("./src/photos/large")
    .filter(name => name !== ".DS_Store")
    .map(name => name.split(".jpg")[0]) // required to make vite import resolver happy
    .map(async name => ({
      keyColor: quantisedColorMap[`${name}.jpg`] ?? "var(--opposite-mode-background)",
      ...(await getPicture({
        src: import(`../photos/large/${name}.jpg`),
        alt: "",
        widths: [640, 768, 1024, 1600, 1920],
        formats: ["avif", "webp"],
      })),
    }))
);

const spacerElementList = [...Array(Math.ceil(photos.length * 0.4))];
---

<Layout
  title="Photos â€” Neef Rehman"
  description="Photography by Neef Rehman, a Creative Technologist and full-stack engineer"
  metaImageUrl="https://neef.co/images/meta-image-photos.png"
>
  <div class="photo-container">
    {
      photos.map(photo => (
        <picture data-transition-element="true" style={`--photo-key-color: ${photo.keyColor}`}>
          {photo.sources.map(source => (
            <source {...source} />
          ))}
          <img {...photo.image} loading="lazy" />
        </picture>
      ))
    }
    {spacerElementList.map(() => <div class="spacer" class="pointer-events-none" />)}
  </div>
</Layout>

<style>
  .photo-container {
    margin: 10px;
    margin-top: -100px;
    padding-bottom: 80px;
    display: flex;
    flex-wrap: wrap;
    align-items: flex-end;
    justify-content: space-around;
    row-gap: clamp(100px, 20vw, 200px);
    column-gap: clamp(50px, 12vw, 120px);
  }

  .photo-container picture,
  .spacer {
    overflow-y: hidden;
    position: relative;
    filter: contrast(88%);
    cursor: crosshair;
    border: 0;
    --width: clamp(280px + var(--y), 280px + var(--y) + 2.5vw, 370px + var(--y));
    --height: clamp(227px + var(--x), 227px + var(--x) + 2.5vw, 300px + var(--x));
    width: var(--width);
    height: var(--height);
    --translate-x: clamp(var(--x) * 0.5, var(--x) + 7vw, var(--x) * 0.8);
    --translate-y: clamp(var(--y) * 0.5, var(--y) + 7vw, var(--y) * 1.3);
    transform: translate3d(var(--translate-x), var(--translate-y), 0);
    transition: transform 2100ms cubic-bezier(0, 0.9, 0.1, 1);
  }

  .photo-container picture img {
    background-color: var(--photo-key-color);
  }

  .photo-container picture:not(.initial-loaded) {
    /* This is needed to prevent the browser from loading images that are at the top of the page before we shuffle the photos */
    display: none;
  }

  .photo-container picture:first-child {
    margin-left: clamp(40px, 7vw, 100px);
  }

  .photo-container picture:hover {
    z-index: 2;
    filter: contrast(88%) brightness(105%);
  }

  .photo-container picture.zoom {
    scale: 3;
  }

  .photo-container picture:not(.loaded) {
    transform: translate3d(var(--translate-x), calc(var(--translate-y) + 50% + var(--y)), 0);
    transition: transform 1300ms cubic-bezier(0, 0.9, 0.1, 1);
  }

  .photo-container picture::after {
    content: "";
    display: block;
    background-color: var(--photo-key-color);
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    transform-origin: bottom;
    transition: transform 300ms cubic-bezier(0.9, 0, 0.6, 1);
  }

  .photo-container picture.loaded::after {
    transform: scale3d(1, 0, 1);
  }

  img {
    object-fit: cover;
    height: 100%;
  }

  @media (max-width: 575px) {
    .spacer {
      height: 0;
    }

    .photo-container picture.zoom {
      scale: 1.5;
    }

    .photo-container picture {
      /* slightly blunter entry transition easing on mobile */
      transition-timing-function: cubic-bezier(0, 0.7, 0.1, 1);
    }
  }
</style>

<script>
  import { shuffle } from "utils/math/shuffle";

  const photoContainer = document.querySelector(".photo-container");

  const photos = photoContainer.querySelectorAll<HTMLElement>(":scope > *");
  const randomOffset = () => 10 * Math.floor(Math.random() * 9) - 40;
  photos.forEach(photo => {
    photo.style.setProperty("--x", `${randomOffset()}px`);
    photo.style.setProperty("--y", `${randomOffset()}px`);
  });
  photoContainer.innerHTML = shuffle([...photos].map(photo => photo.outerHTML)).join("");

  const photosAfterShuffle = photoContainer.querySelectorAll("picture");
  photosAfterShuffle.forEach(photo => photo.classList.add("initial-loaded"));

  let loadedPhotoCount = 0;
  photosAfterShuffle.forEach((photo, i) => {
    const imageElement = photo.querySelector<HTMLImageElement>("img")
    // @ts-expect-error -- it's a real property i promise!
    if (i < 3) imageElement.fetchPriority = "high"
    imageElement.addEventListener("load", () => {
      // loadedPhotoCount delays the transition so they don't all load at the same time (for cached images)
      loadedPhotoCount++;
      setTimeout(() => photo.classList.add("loaded"), 200 + loadedPhotoCount * 25);
    });

    photo.addEventListener("click", () => {
      photo.classList.toggle("zoom");
      const siblings = [...photosAfterShuffle].filter(sibling => sibling !== photo);
      siblings.forEach(sibling => sibling.classList.remove("zoom"));
    });
  });
</script>
